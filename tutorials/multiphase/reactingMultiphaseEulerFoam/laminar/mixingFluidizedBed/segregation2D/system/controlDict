/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     reactingMuliphaseEulerFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         50;

deltaT          1e-5;

writeControl    adjustableRunTime;

writeInterval   .1;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable on;

adjustTimeStep  yes;

maxCo           0.1;

maxDeltaT       5e-4;

functions
{
    fieldAverage1
    {
        type            fieldAverage;
        libs            ("libfieldFunctionObjects.so");
        writeControl    writeTime;
        timeStart       4.0;
        fields
        (
            U.Particles
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
            U.particles
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
            U.particles1
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
            U.particles2
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }

            U.air
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }

            alpha.Particles
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
            alpha.particles
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
            alpha.particles1
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
            alpha.particles2
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }

            Theta.Particles
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
            Theta.particles
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
            Theta.particles1
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
            Theta.particles2
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
	    p
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
            p_rgh
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }

        );
    } 


     /*epsilonVolAverage
    {
        libs ("libutilityFunctionObjects.so");
        type coded;
        name volumeAverage;
         writeControl    writeTime;

        codeExecute
        #{
        const volScalarField& alp
                = mesh().lookupObject<volScalarField>("alpha.air");

        scalar vol_0p7 = 0;
        scalar vol_0p99 = 0;
        scalar tcells  = 0;

        forAll (alp, cellI)
        {
            tcells += 1;
        }

        forAll (alp, cellI)
        {

            if (alp[cellI] > 0.70) {


           vol_0p7 += 1;

            }

            else {
                 vol_0p7 += 0;
            }

            if (alp[cellI] > 0.99) {


           vol_0p99 += 1;

            }

            else {
                 vol_0p99 += 0;
            }

        }

         Info << "cells_v0.7 = " << vol_0p7 <<endl;
         Info << "cells_v0.99 = " << vol_0p99 <<endl;
         Info << "totalcells = " << tcells <<endl;


        #};
    }
*/

}


// ************************************************************************* //
